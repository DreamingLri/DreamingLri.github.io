<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法随手记 2.KMP算法</title>
      <link href="/posts/55d94bc6.html"/>
      <url>/posts/55d94bc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>KMP算法是一个快速查找匹配串的算法，本质需求就是如何快速从**[原字符串]<strong>中找到</strong>[子字符串]**</p><p>介绍算法之前，我们先介绍寻找匹配串的经典算法：暴力匹配算法（Brute Force）</p><h1 id="2-暴力匹配算法-Brute-Force"><a href="#2-暴力匹配算法-Brute-Force" class="headerlink" title="2.暴力匹配算法 Brute Force"></a>2.暴力匹配算法 Brute Force</h1><p>暴力算法本质即是主串一个字一个字与字串进行匹配，一旦匹配失败，就跳回主串的下一个字符重新开始匹配，算法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String s,String p)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &lt; s.length() &amp;&amp; n &lt; p.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(m) == p.charAt(n))&#123; <span class="comment">//如果相同，两个指针均递增</span></span><br><span class="line">            m++;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">//不同的话，m退回到主串开始时的下一个位置，n退回子串开头</span></span><br><span class="line">            m = m-n+<span class="number">1</span>;</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt;= p.length())&#123; <span class="comment">//当字符串长度大于等于子串长度时，则匹配成功</span></span><br><span class="line">        <span class="keyword">return</span> m - p.length();</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是图解</p><p>最开始将从主串的第一个字符与字串进行一一匹配</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009151800.png"></p><p>一旦发现不匹配，主串就跳回下一个字符，字串再重新一一匹配</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009151909.png"></p><p>直到子串和主串完全匹配，结束匹配</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009151919.png"></p><h1 id="3-暴力匹配算法的时间复杂度"><a href="#3-暴力匹配算法的时间复杂度" class="headerlink" title="3.暴力匹配算法的时间复杂度"></a>3.暴力匹配算法的时间复杂度</h1><p>这时我们假设：</p><blockquote><p>s为”12345678xyz”</p><p>p为”xyz”</p></blockquote><p>这时每次匹配时，第一个字符就对不上，不用匹配p后面的字符，时间复杂度为O(m+n)</p><p>但是如果</p><blockquote><p>s为”aaaaaaaaab”</p><p>p为”aab”</p></blockquote><p>这样匹配就特别坏，每次都需要跑到p的最后一个字符才能判断不匹配，时间复杂度会退化为O(mn)</p><p>暴力匹配算法虽然容易想，但是最坏的时间复杂度还是太高，那么，有没有一种方法，能够将匹配算法的时间复杂度压缩到O(m+n)呢？</p><p>这种问题早在1977年便由D.E.Knuth、J.H.Morris 、V.R.Pratts三位大佬解决，称之为KMP算法</p><h1 id="4-KMP算法"><a href="#4-KMP算法" class="headerlink" title="4.KMP算法"></a>4.KMP算法</h1><h2 id="4-1-KMP算法简介"><a href="#4-1-KMP算法简介" class="headerlink" title="4.1 KMP算法简介"></a>4.1 KMP算法简介</h2><p>KMP算法的核心在于，主串s的指针不会进行回溯，而是一头走到底，这样就大大简化了算法复杂度，想要达到这个目的，需要对子串p进行预处理，计算出Next[]数组，出现匹配失效时，利用Next[]数组指出p中指针n要回溯的位置</p><p>woc这都是什么？我怎么一脸懵逼…</p><p>事实上，笔者在第一次学习KMP算法时，也同样是蒙圈的状态，不过还是先让我们看一下KMP算法吧</p><p>我们从头开始匹配子串与主串，这时我们发现子串最后一个字符c与主串对应位置的a不匹配</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009153609.png"></p><p>这个时候，因为我们已经知道前面读过了哪些字符，我们是不是可以直接移动子串到这个位置，继续进行匹配呢？</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009153625.png"></p><p>这里子串的ab与主串的ab完全相同，我们就可以直接跳过，避免重复的比对，接下来就只需要匹配后面的内容就可以了</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009153643.png"></p><p>这时你可能会问，我们怎么知道要跳过多少字符呢？</p><p>这时，我们就要用到Next[]数组了</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009154428.png"></p><p>Next[]数组是根据子串通过一系列计算而来，我们先不管它是如何生成的，只看它的用途</p><p>当字符串匹配出错时，KMP算法会看最后一个匹配字符的next值，这里就是2</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009154441.png"></p><p>于是我们移动子串，直接跳过前面两个字符，这里的2就代表我们可以跳过匹配字符的个数</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009154452.png"></p><p>我们跳过之后，就直接进行子串ab和主串ab的匹配，并继续进行匹配</p><p>由于不需要回溯主串中的指针，KMP算法为线性的O(m+n)，相对于暴力算法可谓是大大简化，下面我们看一下代码</p><h2 id="4-2-KMP算法代码表示"><a href="#4-2-KMP算法代码表示" class="headerlink" title="4.2 KMP算法代码表示"></a>4.2 KMP算法代码表示</h2><p>下面是KMP算法，Next[]数组的求法将在下面讲到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String s,String p)</span>&#123;</span><br><span class="line">    <span class="type">int</span>[] next = buildNext(p);</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m &lt; s.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.charAt(m) == p.charAt(n))&#123; <span class="comment">//如果相同，两个指针均递增</span></span><br><span class="line">            m++;</span><br><span class="line">            n++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123; <span class="comment">//字符失配，查next表，回溯n，m不变</span></span><br><span class="line">            n = next[n-<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">//字符串第一个就失配</span></span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == p.length())&#123; <span class="comment">//如果n与子串长度相等，则匹配成功</span></span><br><span class="line">            <span class="keyword">return</span> m-n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>算法过程由下面动图所示</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/1.gif"></p><h2 id="4-3-Next-数组的生成"><a href="#4-3-Next-数组的生成" class="headerlink" title="4.3 Next[]数组的生成"></a>4.3 Next[]数组的生成</h2><p>了解Next[]数组生成之前，我们需要理解什么是<strong>最大公共前后缀</strong></p><p>最大公共前后缀就是字符串前后相同内容的最长长度</p><p>例如</p><blockquote><p>ABBAB</p><p>ABBAABA</p></blockquote><p>这两段字符串的最大公共前后缀分别是AB和A</p><p>Next[]数组本质上就是在计算对应下标内的数组最大公共前后缀的长度</p><hr><p>下面我们进行一次Next[]数组的计算</p><p>对于第一个字符A，很明显它没有公共前后缀，所以为0</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009162600.png"></p><p>对于第二个字符B也同样是0</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009162614.png"></p><p>第三个字符A，由于有前缀A和后缀它本身，所以为1</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009162632.png"></p><p>第四个字符B，由于前缀AB和后缀AB匹配，长度为2，所以为2</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009162651.png"></p><p>第五个字符C，因为没有匹配前缀，为0</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009162703.png"></p><hr><p>那么Next[]数组算法该如何写呢？</p><p>我们当然可以用for进行暴力求解，但是效率太低了，违背了KPM算法的初衷，我们在这里利用递推的方式求解Next[]数组，这是一种dp算法，通过不断利用已经掌握的信息，可以避免大量无用的计算</p><p>假设我们已经知道当前的前后缀了，接下来分两种情况来讨论</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009163815.png"></p><p>如果下一个字符依然相同，那么则构成了一个更长的前后缀，直接前缀+1就行</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009163839.png"></p><p>但是如果下一个字符不同，既然ABA无法与下面的字符匹配，那么我们就去看看有没有更短的</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009163923.png"></p><p>比如这里的A，它和下面的B可以共同构成前后缀</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009164007.png"></p><p>那么这一步也要进行暴力求解吗？当然不（</p><p>通过前面的计算，我们发现这里的子串ABA前后两部分是完全相同的</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009163923.png"></p><p>也就是说，右边这部分的前缀等于左边部分的后缀，那我们直接可以在左边这里寻找最长前后缀，左边的前后缀我们已经计算好了，是1</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/QQ%E6%88%AA%E5%9B%BE20231009165318.png"></p><p>我们就回到了最开头的部分，继续进行比较</p><p>如果相同，则可以构成更长的前后缀，长度+1即可</p><p>如下图动画所示：</p><p><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com/bgimg/%E6%97%A0%E6%A0%87%E9%A2%98%E8%A7%86%E9%A2%91%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8Clipchamp%E5%88%B6%E4%BD%9C.gif"></p><hr><p>了解完过程之后，算法也就很好写出了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] buildNext(String p)&#123;</span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[p.length()];</span><br><span class="line">    next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">prefix_len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; p.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.charAt(prefix_len) == p.charAt(i))&#123;</span><br><span class="line">            prefix_len++;</span><br><span class="line">            next[j++] = prefix_len;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(prefix_len == <span class="number">0</span>)&#123;</span><br><span class="line">                next[j++] = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prefix_len = next[prefix_len-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-测试源码"><a href="#5-测试源码" class="headerlink" title="5.测试源码"></a>5.测试源码</h1><p>以上就是KMP算法的全部内容，测试全部源码如下</p><h2 id="5-1-暴力匹配算法"><a href="#5-1-暴力匹配算法" class="headerlink" title="5.1 暴力匹配算法"></a>5.1 暴力匹配算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abccccasddwddds&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;ddw&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> search(a, b);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String s,String p)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt; s.length() &amp;&amp; n &lt; p.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(m) == p.charAt(n))&#123;</span><br><span class="line">                m++;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                m = m-n+<span class="number">1</span>;</span><br><span class="line">                n = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &gt;= p.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> m - p.length();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-KMP算法"><a href="#5-2-KMP算法" class="headerlink" title="5.2 KMP算法"></a>5.2 KMP算法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;abccccasddwddds&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;ddw&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> search(a, b);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(String s,String p)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] next = buildNext(p);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &lt; s.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(m) == p.charAt(n))&#123;</span><br><span class="line">                m++;</span><br><span class="line">                n++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                n = next[n-<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                m++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n == p.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> m-n;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] buildNext(String p)&#123;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[p.length()];</span><br><span class="line">        next[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">prefix_len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; p.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.charAt(prefix_len) == p.charAt(i))&#123;</span><br><span class="line">                prefix_len++;</span><br><span class="line">                next[j++] = prefix_len;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(prefix_len == <span class="number">0</span>)&#123;</span><br><span class="line">                    next[j++] = <span class="number">0</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    prefix_len = next[prefix_len-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stream流详解</title>
      <link href="/posts/f4bdeaec.html"/>
      <url>/posts/f4bdeaec.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>本文主要讲述Java中Stream流的具体使用方法，Stream流是JDK8中引入的新方法，极大简化我们对于数组、集合等数据结构的连续操作，使我们的代码更加便于维护<br>但我们要知道的是，Stream类属于惰性操作，即仅在数据全部输入完成后才进行计算</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML常用语法</title>
      <link href="/posts/1842814a.html"/>
      <url>/posts/1842814a.html</url>
      
        <content type="html"><![CDATA[<h2 id="HTML常用语法"><a href="#HTML常用语法" class="headerlink" title="HTML常用语法"></a>HTML常用语法</h2><h3 id="标准HTML结构"><a href="#标准HTML结构" class="headerlink" title="标准HTML结构"></a>标准HTML结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;head&gt;</code>顶部界面，即浏览器标签栏的界面</p><p><code>&lt;title&gt;</code>标题</p><p><code>&lt;body&gt;</code>主体界面</p><p>定义段落<h3 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- This is a comment --&gt;</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h1 id="hello-html"><a href="#hello-html" class="headerlink" title="hello html"></a>hello html</h1><h2 id="hello-html-1"><a href="#hello-html-1" class="headerlink" title="hello html"></a>hello html</h2><h3 id="hello-html-2"><a href="#hello-html-2" class="headerlink" title="hello html"></a>hello html</h3><h4 id="hello-html-3"><a href="#hello-html-3" class="headerlink" title="hello html"></a>hello html</h4><h5 id="hello-html-4"><a href="#hello-html-4" class="headerlink" title="hello html"></a>hello html</h5><h6 id="hello-html-5"><a href="#hello-html-5" class="headerlink" title="hello html"></a>hello html</h6></blockquote><h3 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><hr></blockquote><h3 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is<span class="tag">&lt;<span class="name">br</span> /&gt;</span>a para<span class="tag">&lt;<span class="name">br</span> /&gt;</span>graph with line breaks<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>This is<br>a para<br>graph with line breaks</p></blockquote><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">width</span>=<span class="string">&quot;...&quot;</span> <span class="attr">height</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/Cache_3dc23e60e1d4487b..jpg"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/Cache_3dc23e60e1d4487b..jpg" alt="img"></a></p></blockquote><p>src可以写绝对路径和相对路径</p><blockquote><p>.&#x2F; 表示当前路径，可以省略</p><p>..&#x2F; 表示当前路径的上一个路径</p></blockquote><p>width和height分别可以写</p><blockquote><p>width&#x3D;”100px” 图片大小为100px</p><p>width&#x3D;”80%” 图片占当前界面80%</p></blockquote><h3 id="标题样式"><a href="#标题样式" class="headerlink" title="标题样式"></a>标题样式</h3><p><strong>CSS引入方式</strong></p><ol><li><p>行内样式：写在标签的style属性中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;xxx: xxx; xxx:xxx;&quot;</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>内嵌样式：写在style标签中（可以写在页面任何位置上，但是通常写在head标签中）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        xxx: xxx;</span></span><br><span class="line"><span class="language-css">        xxx: xxx;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外联样式：写在一个单独的.ccs文件中（需要通过link标签在网页中引入）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/news.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>颜色表示</strong></p><ol><li><p>关键字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    hello html</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><h4 id="hello-html-6"><a href="#hello-html-6" class="headerlink" title="hello html "></a><code>hello html </code></h4></h4></blockquote></li><li><p>rgb表示法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    hello html</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>16进制表示法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span></span><br><span class="line">    hello html</span><br><span class="line"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>如果想要更改正文的样式，则需要引入<code>&lt;span&gt;</code>标签，进行正文元素的更改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>hello java<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: beige;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>hello java</p></blockquote><p><strong>CSS选择器</strong></p><p>选取需要设置样式的元素，分为</p><blockquote><p>元素选择器</p><p>id选择器</p><p>类选择器</p></blockquote><ol><li><p>元素选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">元素名称&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>id选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#id属性值&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#hid&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;hid&quot;</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>类选择器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.class属性值&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cls&#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;...&quot;</span> <span class="attr">target</span>=<span class="string">&quot;...&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>属性：</p><p>href：指定访问资源的url</p><p>target：指定在何处打开资源</p><p> _self：默认值，在当前页面打开</p><p> _blank：在空白页面打开</p></blockquote><p><strong>CSS属性</strong></p><blockquote><p>text-decoration 规定添加到文本的修饰，none表示定义标准的文本</p><p> color: 定义文本的颜色</p></blockquote><h3 id="HTML列表"><a href="#HTML列表" class="headerlink" title="HTML列表"></a>HTML列表</h3><ol><li><p>无序列表</p><p>无序列表始于 <code>&lt;ul&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>Coffee</li><li>Milk</li></ul></blockquote></li><li><p>有序列表</p><p>有序列表始于 <code>&lt;ol&gt;</code> 标签。每个列表项始于 <code>&lt;li&gt;</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>Coffee</li><li>Milk</li></ol></blockquote></li><li><p>定义列表</p><p>自定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个自定义列表项以 <code>&lt;dt&gt;</code> 开始。每个自定义列表项的定义以</p><p>开始</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Coffee<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Black hot drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Milk<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>White cold drink<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><p>Coffee</p><p>Black hot drink</p></li><li><p>Milk</p><p>White cold drink</p></li></ul></blockquote></li></ol><h3 id="HTML块和类"><a href="#HTML块和类" class="headerlink" title="HTML块和类"></a>HTML块和类</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.cities</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>:black;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>London<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Paris<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paris is the capital and most populous city of France.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Situated on the Seine River, it is at the heart of the 蝜e-de-France region, also known as the r間ion parisienne.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Within its metropolitan area is one of the largest population centers in Europe, with over 12 million inhabitants.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cities&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Tokyo<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Tokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>It is the seat of the Japanese government and the Imperial Palace, and the home of the Japanese Imperial Family.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The Tokyo prefecture is part of the world&#x27;s most populous metropolitan area with 38 million people and the world&#x27;s largest urban economy.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><!DOCTYPE html></head><h2 id="London"><a href="#London" class="headerlink" title="London"></a>London</h2><p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p><p>Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium.</p><h2 id="Paris"><a href="#Paris" class="headerlink" title="Paris"></a>Paris</h2><p>Paris is the capital and most populous city of France.</p><p>Situated on the Seine River, it is at the heart of the 蝜e-de-France region, also known as the r間ion parisienne.</p><p>Within its metropolitan area is one of the largest population centers in Europe, with over 12 million inhabitants.</p><h2 id="Tokyo"><a href="#Tokyo" class="headerlink" title="Tokyo"></a>Tokyo</h2><p>Tokyo is the capital of Japan, the center of the Greater Tokyo Area, and the most populous metropolitan area in the world.</p><p>It is the seat of the Japanese government and the Imperial Palace, and the home of the Japanese Imperial Family.</p><p>The Tokyo prefecture is part of the world’s most populous metropolitan area with 38 million people and the world’s largest urban economy.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap底层原理</title>
      <link href="/posts/3d383de8.html"/>
      <url>/posts/3d383de8.html</url>
      
        <content type="html"><![CDATA[<p>e2和cpa都是什么呢？<del>不知道捏</del></p><h2 id="一、简单介绍HashMap的底层实现"><a href="#一、简单介绍HashMap的底层实现" class="headerlink" title="一、简单介绍HashMap的底层实现"></a>一、简单介绍HashMap的底层实现</h2><p>HashMap总体是数组+链表的存储结构</p><p>基于hashCode，HashMap有着十分出色的查找能力，可以快速寻找内容，但是存储的数据不能重复，也不能排序或者使用index进行遍历</p><h2 id="二、HashMap的存储结构"><a href="#二、HashMap的存储结构" class="headerlink" title="二、HashMap的存储结构"></a>二、HashMap的存储结构</h2><p>HashMap是基于数组+链表存储的数据结构，在jdk1.8之后，当数组长度大于64且链表长度大于8时，链表会被自动转换为红黑树</p><p>HashMap每一个数组都由一个个叫做node的小单元构成，数组初始长度被设置为16</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure><p>node元素在链表和红黑树中有不同的结构，红黑树中的TreeNode继承于链表中的Node</p><p>1.链表中的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">     <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">     <span class="keyword">final</span> K key;</span><br><span class="line">     V value;</span><br><span class="line">     Node&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure><ul><li><code>final int hash</code>为key的hash值，通过调用<code>hashCode()</code>方法并进行一系列计算得到</li><li><code>final K key</code>为key</li><li><code>V value</code>为key对应的value</li><li><code>Node&lt;K,V&gt; next</code>记录着下一个节点的地址值，以此来实现链表</li></ul><hr><p>2.红黑树中的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TreeNode</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        TreeNode&lt;K,V&gt; parent;  <span class="comment">// red-black tree links</span></span><br><span class="line">        TreeNode&lt;K,V&gt; left;</span><br><span class="line">        TreeNode&lt;K,V&gt; right;</span><br><span class="line">        TreeNode&lt;K,V&gt; prev;    <span class="comment">// needed to unlink next upon deletion</span></span><br><span class="line">        <span class="type">boolean</span> red;</span><br><span class="line">        TreeNode(<span class="type">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">super</span>(hash, key, val, next);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>由于继承了链表中的Node，TreeNode也一样拥有以下内容</p><ul><li><code>final int hash</code>为key的hash值</li><li><code>final K key</code>为key</li><li><code>V value</code>为key对应的value</li><li><code>Node&lt;K,V&gt; next</code>记录着下一个节点的地址值</li></ul><p>同时TreeNode还有以下内容，用来实现红黑树</p><ul><li><code>TreeNode&lt;K,V&gt; parent</code>记录父节点的地址值</li><li><code>TreeNode&lt;K,V&gt; left</code>记录左子节点的地址值</li><li><code>TreeNode&lt;K,V&gt; right</code>记录右子节点的地址值</li><li><code>TreeNode&lt;K,V&gt; prev</code>记录上一个节点的地址值</li><li><code>boolean red</code>记录节点的颜色，默认为<strong>红色</strong></li></ul><h2 id="三、HashMap的put操作过程"><a href="#三、HashMap的put操作过程" class="headerlink" title="三、HashMap的put操作过程"></a>三、HashMap的put操作过程</h2><p>我们假定运行如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Integer&gt; hm = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">hm.put(<span class="string">&quot;aaa&quot;</span> , <span class="number">111</span>);</span><br><span class="line">hm.put(<span class="string">&quot;bbb&quot;</span> , <span class="number">222</span>);</span><br><span class="line">hm.put(<span class="string">&quot;ccc&quot;</span> , <span class="number">333</span>);</span><br><span class="line">hm.put(<span class="string">&quot;ddd&quot;</span> , <span class="number">444</span>);</span><br><span class="line">hm.put(<span class="string">&quot;eee&quot;</span> , <span class="number">555</span>);</span><br></pre></td></tr></table></figure><p>进行put操作时，至少要考虑三种情况：</p><ol><li>数组位置为null</li><li>数组位置不为null，key出现了重复，进行元素覆盖</li><li>数组位置不为null，key不重复，挂在下面形成链表，进而形成红黑树</li></ol><hr><p>put操作源码如下，输入为key和value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>返回值为被覆盖元素的值，如果没有进行覆盖，就返回null</p><p><code>putVal(hash(key), key, value, false, true)</code>此方法中调用了<code>hash()</code>方法，方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> h;</span><br><span class="line">        <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此方法即利用key计算出hash值，再把hash值进行另外的一些处理，并进行返回</p><hr><h4 id="1-数组位置为null"><a href="#1-数组位置为null" class="headerlink" title="1.数组位置为null"></a>1.数组位置为null</h4><p><code>putVal</code>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个局部变量，用来记录hash表中数组的地址值</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="comment">//临时的第三方变量，用来记录键值对对象的地址值</span></span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    <span class="comment">//n为当前数组的长度，i为索引</span></span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//把hash表中数组的地址值赋值给tab，并将tab的长度赋值给n</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//调用resize方法</span></span><br><span class="line">        <span class="comment">//如果当前是第一次添加数据，底层会创建一个默认长度为16，加载因子为0.75的数组</span></span><br><span class="line">        <span class="comment">//如果不是第一次添加数据，会看底层的元素是否达到了扩容的条件</span></span><br><span class="line">        <span class="comment">//如果达到了扩容条件，底层会将数组扩容为原来的两倍，并将数据全部转移过去</span></span><br><span class="line">        <span class="comment">//将调用resize方法后的数组长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//拿着数组的长度和key的hash值进行计算，计算出当前键值对应该存入的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            <span class="comment">//如果当前位置为空，就创建一个node对，并进行存入</span></span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e; K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//threshold:记录着数组的长度 * 0.75，hash表的扩容时机</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中<code>final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict)</code>方法块中，参数hash为刚刚求出的hash值，key为键，value为值，onlyIfAbsent为如果键发生重复，是否保留</p><hr><h4 id="2-数组位置不为null，key出现了重复，进行元素覆盖"><a href="#2-数组位置不为null，key出现了重复，进行元素覆盖" class="headerlink" title="2.数组位置不为null，key出现了重复，进行元素覆盖"></a>2.数组位置不为null，key出现了重复，进行元素覆盖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个局部变量，用来记录hash表中数组的地址值</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="comment">//临时的第三方变量，用来记录键值对对象的地址值</span></span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    <span class="comment">//n为当前数组的长度，i为索引</span></span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//把hash表中数组的地址值赋值给tab，并将tab的长度赋值给n</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//调用resize方法</span></span><br><span class="line">        <span class="comment">//如果当前是第一次添加数据，底层会创建一个默认长度为16，加载因子为0.75的数组</span></span><br><span class="line">        <span class="comment">//如果不是第一次添加数据，会看底层的元素是否达到了扩容的条件</span></span><br><span class="line">        <span class="comment">//如果达到了扩容条件，底层会将数组扩容为原来的两倍，并将数据全部转移过去</span></span><br><span class="line">        <span class="comment">//将调用resize方法后的数组长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//拿着数组的长度和key的hash值进行计算，计算出当前键值对应该存入的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line">            <span class="comment">//p.hash == hash左边为数组中键值对的hash值</span></span><br><span class="line">            <span class="comment">//右边为要添加键值对的hash值，如果key不一样，则返回false</span></span><br><span class="line">            <span class="comment">//如果key一样，返回true</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//for下面是寻找链表应该存入的位置</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果发生了hash碰撞，就会结束寻找</span></span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//将下一个节点的地址值交给p</span></span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行覆盖</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="comment">//记录旧的value</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="comment">//进行覆盖</span></span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="comment">//返回旧的value</span></span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//threshold:记录着数组的长度 * 0.75，hash表的扩容时机</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-数组位置不为null，key不重复，挂在下面形成链表，进而形成红黑树"><a href="#3-数组位置不为null，key不重复，挂在下面形成链表，进而形成红黑树" class="headerlink" title="3.数组位置不为null，key不重复，挂在下面形成链表，进而形成红黑树"></a>3.数组位置不为null，key不重复，挂在下面形成链表，进而形成红黑树</h4><p><code>putVal</code>源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个局部变量，用来记录hash表中数组的地址值</span></span><br><span class="line">    Node&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="comment">//临时的第三方变量，用来记录键值对对象的地址值</span></span><br><span class="line">    Node&lt;K,V&gt; p;</span><br><span class="line">    <span class="comment">//n为当前数组的长度，i为索引</span></span><br><span class="line">    <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">//把hash表中数组的地址值赋值给tab，并将tab的长度赋值给n</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        <span class="comment">//调用resize方法</span></span><br><span class="line">        <span class="comment">//如果当前是第一次添加数据，底层会创建一个默认长度为16，加载因子为0.75的数组</span></span><br><span class="line">        <span class="comment">//如果不是第一次添加数据，会看底层的元素是否达到了扩容的条件</span></span><br><span class="line">        <span class="comment">//如果达到了扩容条件，底层会将数组扩容为原来的两倍，并将数据全部转移过去</span></span><br><span class="line">        <span class="comment">//将调用resize方法后的数组长度赋值给n</span></span><br><span class="line">            n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">//拿着数组的长度和key的hash值进行计算，计算出当前键值对应该存入的位置</span></span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">            tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            K k;</span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">            <span class="comment">//判断数组中取出来的键值对是不是红黑树中的节点</span></span><br><span class="line">            <span class="comment">//如果是，则调用putTreeVal方法，把当前节点按照规则添加到红黑树中</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果从数组中获取出来的键值对不是红黑树中的节点</span></span><br><span class="line">                <span class="comment">//表示此时下面挂载的是链表</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                    <span class="comment">//判断当前节点的下方有没有节点</span></span><br><span class="line">                    <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//如果没有，就将创建一个新的节点，并挂载在下方形成链表</span></span><br><span class="line">                        p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                        <span class="comment">//判断当前链表长度是否超过8，如果超过8，就会调用treeifyBin方法</span></span><br><span class="line">                        <span class="comment">//treeifyBin底层还会继续判断数组长度是不是大于6 4</span></span><br><span class="line">                        <span class="comment">//如果同时满足，就会把链表转化为红黑树</span></span><br><span class="line">                        <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                            treeifyBin(tab, hash);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果e为null，表示当前不需要覆盖任何元素</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">                <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                    e.value = value;</span><br><span class="line">                afterNodeAccess(e);</span><br><span class="line">                <span class="keyword">return</span> oldValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ++modCount;</span><br><span class="line">    <span class="comment">//threshold:记录着数组的长度 * 0.75，hash表的扩容时机</span></span><br><span class="line">        <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        afterNodeInsertion(evict);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示当前没有覆盖任何元素，返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))</code>此语句中包含三个命题：</p><p><code>p.hash == hash</code>左边为数组中键值对的hash值，右边为要添加键值对的hash值，如果key不一样，则返回false</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList底层原理</title>
      <link href="/posts/342ea5b4.html"/>
      <url>/posts/342ea5b4.html</url>
      
        <content type="html"><![CDATA[<p><del>不要学习计算机，不然会变成xyn</del></p><h2 id="一、简单介绍ArrayList的底层实现"><a href="#一、简单介绍ArrayList的底层实现" class="headerlink" title="一、简单介绍ArrayList的底层实现"></a>一、简单介绍ArrayList的底层实现</h2><p>ArrayList底层数据结构为顺序表，使用数组实现，具体表现为：</p><p>1.物理内存上连续</p><p>2.逻辑上连续</p><p>3.大小可以动态扩展</p><p>使用它会有如下特性：</p><p>1.利用空参构造时，会在底层创建一个默认长度为0的数组</p><p>2.添加第一个元素时，底层会创建一个新的长度为10的数组</p><p>3.存满时，会扩容1.5倍</p><p>4.如果一次性添加多个数据，超出原数组长度的1.5倍，则会按照多出的数据新建数组</p><h2 id="二、ArrayList源码分析"><a href="#二、ArrayList源码分析" class="headerlink" title="二、ArrayList源码分析"></a>二、ArrayList源码分析</h2><h3 id="重要的字段"><a href="#重要的字段" class="headerlink" title="重要的字段"></a>重要的字段</h3><p>1.elementData字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure><p>elementData用来存放ArrayList中的内容，可以看作是利用Object数组存储</p><p>2.size字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><p>size是element的内容个数，并非elementData的长度</p><p>3.DEFAULT_CAPACITY字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>数组使用无参数构造时，最小默认长度为10</p><p>4.EMPTY_ELEMENTDATA、DEFAULTCAPACITY_EMPTY_ELEMENTDATA字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>使用无参构造时的默认返回，均为长度为0的数组</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>1.无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>无参构造直接把DEFAULTCAPACITY_EMPTY_ELEMENTDATA这个赋值给elementData来初始化，人话就是<strong>创建了一个长度为0的数组</strong></p><p>2.参数为int值的构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果给出一个int值的长度，就将其传入elementData，如果长度为0就把EMPTY_ELEMENTDATA赋值给elementData进行初始化</p><h3 id="Add方法"><a href="#Add方法" class="headerlink" title="Add方法"></a>Add方法</h3><p>当使用如下代码时，你的java虚拟机是这样做的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure><p>1.空参构造list，传入DEFAULTCAPACITY_EMPTY_ELEMENTDATA，创建一个长度为0的Object数组</p><p>2.使用add方法，添加第一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        modCount++;</span><br><span class="line">        add(e, elementData, size);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>将<code>&quot;aaa&quot;</code>传入到形参<code>e</code>里面，并调用<code>add(e, elementData, size)</code>方法，<code>e</code>为当前要添加的元素，即<code>&quot;aaa&quot;</code>，<code>elementData</code>为集合底层的数组名字，<code>size</code>为集合的长度或者当前元素应存入的位置</p><p>3.调用<code>add(e, elementData, size)</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e, Object[] elementData, <span class="type">int</span> s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == elementData.length)</span><br><span class="line">            elementData = grow();</span><br><span class="line">        elementData[s] = e;</span><br><span class="line">        size = s + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>if语句表示检测数组是不是满了，如果满了就调用无参<code>grow()</code>方法，即数组扩容</p><p>如果没满，就将元素添加到size指示的位置，并将size+1</p><p>4.数组扩容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow() &#123;</span><br><span class="line">        <span class="keyword">return</span> grow(size + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此时会把size+1，并调用有参的<code>grow()</code>方法，<strong>此时size为1，也就是minCapacity为1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object[] grow(<span class="type">int</span> minCapacity) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">        <span class="keyword">if</span> (oldCapacity &gt; <span class="number">0</span> || elementData != DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> ArraysSupport.newLength(oldCapacity,</span><br><span class="line">                    minCapacity - oldCapacity, <span class="comment">/* minimum growth */</span></span><br><span class="line">                    oldCapacity &gt;&gt; <span class="number">1</span>           <span class="comment">/* preferred growth */</span>);</span><br><span class="line">            <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>[Math.max(DEFAULT_CAPACITY, minCapacity)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>利用oldCapacity记录老容量，下面根据if语句分为两种情况</p><h4 id="当我们第一次添加数据的时候oldCapacity为0，跳转到else语句"><a href="#当我们第一次添加数据的时候oldCapacity为0，跳转到else语句" class="headerlink" title="当我们第一次添加数据的时候oldCapacity为0，跳转到else语句"></a>当我们第一次添加数据的时候oldCapacity为0，跳转到else语句</h4><p>代码会比较DEFAULT_CAPACITY（数值为10）与minCapacity的大小，并使用最大的数值调用，其实就是创建一个长度为10的Object数组</p><h4 id="在后面需要扩容时，oldCapacity就不为0，跳转到if语句"><a href="#在后面需要扩容时，oldCapacity就不为0，跳转到if语句" class="headerlink" title="在后面需要扩容时，oldCapacity就不为0，跳转到if语句"></a>在后面需要扩容时，oldCapacity就不为0，跳转到if语句</h4><p>1.此时minCapacity为11，oldCapacity为10，并调用<code>newlength()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">newLength</span><span class="params">(<span class="type">int</span> oldLength, <span class="type">int</span> minGrowth, <span class="type">int</span> prefGrowth)</span> &#123;</span><br><span class="line">        <span class="comment">// preconditions not checked because of inlining</span></span><br><span class="line">        <span class="comment">// assert oldLength &gt;= 0</span></span><br><span class="line">        <span class="comment">// assert minGrowth &gt; 0</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">prefLength</span> <span class="operator">=</span> oldLength + Math.max(minGrowth, prefGrowth); <span class="comment">// might overflow</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> &lt; prefLength &amp;&amp; prefLength &lt;= SOFT_MAX_ARRAY_LENGTH) &#123;</span><br><span class="line">            <span class="keyword">return</span> prefLength;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// put code cold in a separate method</span></span><br><span class="line">            <span class="keyword">return</span> hugeLength(oldLength, minGrowth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.传入的三个参数分别为<code>oldCapacity</code>老长度，<code>minCapacity - oldCapacity</code>理论上应该新增的容量，<code>oldCapacity &gt;&gt; 1</code>老长度除以2，即默认新增容量的大小</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">prefLength</span> <span class="operator">=</span> oldLength + Math.max(minGrowth, prefGrowth);</span><br></pre></td></tr></table></figure><p>3.此时oldLength为10，minGrowth为1，prefGrowth为5，通过比较minGrowth和prefGrowth的大小，选择更大的一方，默认扩容为原长度的1.5倍，但是如果扩容后的理论值超过原长度的1.5倍，就直接使用理论值来新建数组</p><p>4.如果preLength数值正常，就默认将preLength赋值给newCapacity，执行下面的语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">return</span> <span class="variable">elementData</span> <span class="operator">=</span> Arrays.copyOf(elementData, newCapacity);</span><br></pre></td></tr></table></figure><p>使用newCapacity的数值创建新的数组，并把elementData中的所有数据，全部拷贝到新数组中，之后将新数组覆盖到elementData中，进行返回，完成扩容操作</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pycharm安装教程</title>
      <link href="/posts/d99a4a60.html"/>
      <url>/posts/d99a4a60.html</url>
      
        <content type="html"><![CDATA[<p><strong>本文档基于上一篇<a href="https://www.dreaminglri.top/posts/a6df894a.html">Python简单安装教程</a>，需要你完成上一篇文档的操作，再来阅读</strong></p><p>阅读完本文档，并一步步跟着做，你会实现：</p><ul><li>下载PyCharm</li><li>安装PyCharm</li><li>利用PyCharm写出一个简单程序</li><li>为什么不进行汉化</li></ul><h2 id="一、下载PyCharm"><a href="#一、下载PyCharm" class="headerlink" title="一、下载PyCharm"></a>一、下载PyCharm</h2><p>1.打开<a href="https://www.jetbrains.com/pycharm/">PyCharm官网</a>，点击Download按钮进入界面</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813171755.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813171755.png" alt="img"></a></p><p>2.在打开的界面内，你可以选择两种版本的PyCharm进行下载，一个为专业版，一个为社区版。日常学习社区版完全够用，专业版是要钱的，在这里我们点击下载社区版</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172053.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172053.png" alt="img"></a></p><h2 id="二、安装PyCharm"><a href="#二、安装PyCharm" class="headerlink" title="二、安装PyCharm"></a>二、安装PyCharm</h2><p>1.双击运行安装包</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172432.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172432.png" alt="img"></a></p><p>2.一路点击Next</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172519.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172519.png" alt="img"></a></p><p>3.在这个页面把选项全部勾选</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172540.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172540.png" alt="img"></a></p><p>4.点击Finish，结束安装</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172631.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172631.png" alt="img"></a></p><p>5.在桌面上，你将会获得PyCharm的快捷方式</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172643.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813172643.png" alt="img"></a></p><h2 id="三、利用PyCharm写出一个简单程序"><a href="#三、利用PyCharm写出一个简单程序" class="headerlink" title="三、利用PyCharm写出一个简单程序"></a>三、利用PyCharm写出一个简单程序</h2><p>1.双击打开PyCharm</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173012.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173012.png" alt="img"></a></p><p>2.点击New Project，新建项目</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173055.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173055.png" alt="img"></a></p><p>3.为你的项目起好名字，存放的位置，之后点击Create</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173126.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813173126.png" alt="img"></a></p><p>4.创建项目后，PyCharm会自动帮我们构建main.py文件，全选main.py里面的内容，进行删除</p><p>5.输入下面一行代码，当然你也可以复制我写好的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;hello python&quot;)</span><br></pre></td></tr></table></figure><p>6.点击小三角运行</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813174341.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813174341.png" alt="img"></a></p><p>7.你将会在控制台中看到内容输出</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813174746.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230813174746.png" alt="img"></a></p><h2 id="四、为什么不进行汉化"><a href="#四、为什么不进行汉化" class="headerlink" title="四、为什么不进行汉化"></a>四、为什么不进行汉化</h2><p>有人会问了，vscode都进行了汉化，为什么PyCharm要操作全英文界面呢？</p><p>网络上的确有PyCharm的汉化，但是其汉化版本是通过替换程序底层文件实现的，汉化不完全不说，有时候还会出bug，我更推荐大家使用英文原版程序进行运行</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode安装教程</title>
      <link href="/posts/a836310a.html"/>
      <url>/posts/a836310a.html</url>
      
        <content type="html"><![CDATA[<p>看完本文档，并一步步跟着做，你会实现：</p><ul><li>下载vscode</li><li>安装vscode</li><li>将vscode汉化</li><li>安装python支持库</li><li>写出你自己的第一个python程序</li><li>python自学推荐</li></ul><h2 id="一、下载vscode"><a href="#一、下载vscode" class="headerlink" title="一、下载vscode"></a>一、下载vscode</h2><p>1.打开<a href="https://code.visualstudio.com/">vscode官网</a>，点击Download for Windows</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225054.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225054.png" alt="img"></a></p><p>2.你将获得vscode安装包一份</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225006.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225006.png" alt="img"></a></p><h2 id="二、安装vscode"><a href="#二、安装vscode" class="headerlink" title="二、安装vscode"></a>二、安装vscode</h2><p>1.双击vscode安装包，一路点击下一步就行</p><p><del>相对于python，vscode是名副其实的傻瓜安装</del></p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225341.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225341.png" alt="img"></a></p><p>然后你的桌面上就会出现vscode的快捷方式</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225547.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812225547.png" alt="img"></a></p><h2 id="三、将vscode汉化"><a href="#三、将vscode汉化" class="headerlink" title="三、将vscode汉化"></a>三、将vscode汉化</h2><p>当你打开vscode后，你会发现界面是全英文的，一脸懵逼，接下来教你如何汉化vscode</p><p>1.双击打开vscode，点击扩展，在搜索栏搜索”Chinese”，选择Chinese中文简体点击Install进行安装</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/d370bb4f7da641d78c6e206c5aa890a3.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/d370bb4f7da641d78c6e206c5aa890a3.png" alt="img"></a></p><p>2.安装完后单击Change Language and Restart，重启VScode软件，然后你就会发现，你的界面变成中文辣</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/f17d61f751474ed98023c8baa334252a.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/f17d61f751474ed98023c8baa334252a.png" alt="img"></a></p><h2 id="四、安装python支持库"><a href="#四、安装python支持库" class="headerlink" title="四、安装python支持库"></a>四、安装python支持库</h2><p>1.点击扩展，在搜索栏搜索”python”，选择Python点击”安装”进行安装</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230313.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230313.png" alt="img"></a></p><p>2.当看到下图时，证明你已经配置好python支持库了，可以<del>愉快地</del>敲python了</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230429.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230429.png" alt="img"></a></p><h2 id="五、写出你自己的第一个python程序"><a href="#五、写出你自己的第一个python程序" class="headerlink" title="五、写出你自己的第一个python程序"></a>五、写出你自己的第一个python程序</h2><p>1.点击文件，点击新建文本文件，选择语言，在搜索框内输入python，选择python语言</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230657.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230657.png" alt="img"></a></p><p>2.键入下面一行代码</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230921.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812230921.png" alt="img"></a></p><p>当然你要是懒得敲也可以复制下面我已经敲好的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Python&quot;</span>)</span><br></pre></td></tr></table></figure><p>3.点击Ctrl+S，将文件保存在一个位置，名字就叫做<code>hellopython.py</code>吧</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231225.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231225.png" alt="img"></a></p><p>4.点击vscode右上角的小三角，运行程序</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231528.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231528.png" alt="img"></a></p><p>5.然后你就会看见，下面的控制台输出了Hello Python语句</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231417.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812231417.png" alt="img"></a></p><p>这样，你人生中的第一段python代码也写完了</p><h2 id="六、python自学推荐"><a href="#六、python自学推荐" class="headerlink" title="六、python自学推荐"></a>六、python自学推荐</h2><p>因为python本身为解释型语言，其语法十分简单，同时不需要考虑数据溢出，数据转换等问题，深受新手编程者的喜爱，也易于新手学习。简单的语法不是没有代价的，由于其内部实现的代码臃肿，现代公司很少用python来编写大型程序，python在实际中多用于Ai运算、脚本开发等内容中</p><p>下面是我推荐的一些python课程：</p><p>1.<a href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程runoob.com</a></p><p>2.<a href="https://www.bilibili.com/video/BV1qW4y1a7fU/">bilibili黑马程序员python教程</a></p><p>3.未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python简单安装教程</title>
      <link href="/posts/a6df894a.html"/>
      <url>/posts/a6df894a.html</url>
      
        <content type="html"><![CDATA[<p>看完本文档，并一步一步跟着做，你会实现：</p><ul><li>下载python</li><li>安装python</li><li>配置环境变量</li><li>python编程工具推荐</li></ul><h2 id="一、下载python"><a href="#一、下载python" class="headerlink" title="一、下载python"></a>一、下载python</h2><p>事实上非常简单，点击<a href="https://www.python.org/downloads/windows/">这里</a>就可以进入python的下载界面</p><p>打开之后是这样的：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812214316.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812214316.png" alt="img"></a></p><p>我相信你肯定会一眼晕，这都什么乱七八糟的</p><p>下面是一些注释：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812214851.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812214851.png" alt="img"></a></p><p>什么？你说这你也看的晕乎乎的？</p><p>那么接下来跟着我一步步操作，保证你完美下载python</p><p>1.点击Latest Python 3 Release - Python 3.11.4，进入页面</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215107.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215107.png" alt="img"></a></p><p>打开后页面是这样的：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215332.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215332.png" alt="img"></a></p><p>2.用鼠标滚轮拉到最下面，点击Windows installer(64-bit)，进行下载：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215429.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812215429.png" alt="img"></a></p><p>3.下载完成之后，你会在此电脑的下载界面，获得一个安装包：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220107.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220107.png" alt="img"></a></p><h3 id="python版本简介"><a href="#python版本简介" class="headerlink" title="python版本简介"></a>python版本简介</h3><p>python包括python2和python3两个大版本，目前主流使用python3，学校课程也多教授python3课程，你可能会想，python3都很主流了，为什么python2还存在呢？</p><p>其实，在以前有很多程序都是使用python2编写的，维护这些应用也还需要python2，所以说python2依旧未被淘汰。</p><h2 id="二、安装python"><a href="#二、安装python" class="headerlink" title="二、安装python"></a>二、安装python</h2><p>1.双击刚刚的安装包，开始安装</p><p>2.勾选”Add Python to PATH”框（一定一定要勾选），点击Install Now</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220306.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220306.png" alt="img"></a></p><p>安装过程会有点慢，请耐心等待安装完成</p><p>3.安装完成，点击Close退出安装界面</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220545.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220545.png" alt="img"></a></p><p>4.安装完成后，如下操作打开命令行：</p><p>同时按 “Windows+R” -&gt; 输入 “cmd” -&gt;点击确定</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220811.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812220811.png" alt="img"></a></p><p>5.输入”python”，之后按一下回车键，若出现如图所示的版本号，则视为安装成功</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221014.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221014.png" alt="img"></a></p><p>如果你没有出现这条信息，则说明你需要配置系统PATH，但是一般自动安装不会出现此问题，如果出现，请看下一章内容教你进行系统环境变量配置</p><h2 id="三、环境变量配置"><a href="#三、环境变量配置" class="headerlink" title="三、环境变量配置"></a>三、环境变量配置</h2><p>如果你正常出现了上图python的版本号，请跳过这章</p><h4 id="python环境变量配置"><a href="#python环境变量配置" class="headerlink" title="python环境变量配置"></a>python环境变量配置</h4><p>1.右键此电脑，单击属性</p><p>2.点击高级系统设置</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221448.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221448.png" alt="img"></a></p><p>3.点击环境变量</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221554.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221554.png" alt="img"></a></p><p>4.单击选中Path，点击编辑</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221723.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221723.png" alt="img"></a></p><p>5.打开python的安装路径，一般在下图所在的位置：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812222313.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812222313.png" alt="img"></a></p><p>点击地址栏（红圈那部分），Ctrl+C复制下来</p><p>6.回到刚刚的环境变量界面，在 “编辑环境变量” 选项卡里，单击新建</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221859.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812221859.png" alt="img"></a></p><p>7.Ctrl+V粘贴路径到红框中，之后点击确定</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812222622.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/QQ%E6%88%AA%E5%9B%BE20230812222622.png" alt="img"></a></p><p>这样python的PATH就配置好了</p><h4 id="pip环境变量配置"><a href="#pip环境变量配置" class="headerlink" title="pip环境变量配置"></a>pip环境变量配置</h4><p>python经常会用到pip工具来安装第三方库，通常情况下，pip库会随着python一起安装好，但是有时会出现错误提示，这同样可以通过配置环境变量来解决，</p><p>配置步骤与上面一样，需要注意的是，Ctrl+C复制的地址值一般为：</p><p>C:\Users\你自己的用户名\AppData\Local\Programs\Python\Python311\Scripts\</p><h2 id="四、python编辑工具推荐"><a href="#四、python编辑工具推荐" class="headerlink" title="四、python编辑工具推荐"></a>四、python编辑工具推荐</h2><p>我通常推荐各位初学者使用VS code进行小型项目的书写，vscode整体轻便好看，打开方便，内置许多优秀插件，十分适合初学者进行使用</p><p>如果需要写大型项目，则推荐pycharm</p><p>下一篇文章将会教大家如何安装vscode与pycharm</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的神奇操作</title>
      <link href="/posts/1668648a.html"/>
      <url>/posts/1668648a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git的神奇操作"><a href="#Git的神奇操作" class="headerlink" title="Git的神奇操作"></a>Git的神奇操作</h1><p><del>如果有任何想穿女装的表现，请立刻停止学习CS</del></p><p>鉴定为学CS学的</p><h2 id="1-请初始化您的本地git仓库"><a href="#1-请初始化您的本地git仓库" class="headerlink" title="1. 请初始化您的本地git仓库"></a>1. 请初始化您的本地git仓库</h2><p>在你想要创建仓库的地址下面输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>属于你自己的大号垃圾池创建好了</p><h2 id="2-请为您的仓库添加文件"><a href="#2-请为您的仓库添加文件" class="headerlink" title="2. 请为您的仓库添加文件"></a>2. 请为您的仓库添加文件</h2><h3 id="添加文件到暂存区"><a href="#添加文件到暂存区" class="headerlink" title="添加文件到暂存区"></a>添加文件到暂存区</h3><p>在文件夹内创建好文件 xxx.md 后，命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、添加一个或多个文件到暂存区</span><br><span class="line">git add [file1] [file2] ...</span><br><span class="line"> </span><br><span class="line">2、添加指定目录到暂存区，包括子目录</span><br><span class="line">git add [<span class="built_in">dir</span>]</span><br><span class="line"> </span><br><span class="line">3、添加当前目录下的所有文件到暂存区</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>即可向你的仓库添加一份或多份垃圾</p><h3 id="查看本地库"><a href="#查看本地库" class="headerlink" title="查看本地库"></a>查看本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>可以用来查看上一次提交时是否对文件产生了修改</p><h3 id="添加到本地库"><a href="#添加到本地库" class="headerlink" title="添加到本地库"></a>添加到本地库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;日志信息&quot;</span></span><br></pre></td></tr></table></figure><p>将暂存区中的文件提交到本地库</p><h3 id="查看日志信息"><a href="#查看日志信息" class="headerlink" title="查看日志信息"></a>查看日志信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reflog //查看版本信息</span><br><span class="line">git <span class="built_in">log</span> //查看版本详细信息</span><br></pre></td></tr></table></figure><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br></pre></td></tr></table></figure><p><code>--mixed</code>为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD^            <span class="comment"># 回退所有内容到上一个版本 </span></span><br><span class="line">git reset HEAD^ hello.php  <span class="comment"># 回退 hello.php 文件的版本到上一个版本 </span></span><br><span class="line">git  reset  052e           <span class="comment"># 回退到指定版本</span></span><br></pre></td></tr></table></figure><p><code>--soft</code> 参数用于回退到某个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~3   <span class="comment"># 回退上上上一个版本 </span></span><br></pre></td></tr></table></figure><p><code>--hard</code> 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~3  <span class="comment"># 回退上上上一个版本 </span></span><br><span class="line">git reset –hard bae128  <span class="comment"># 回退到某个版本回退点之前的所有信息。</span></span><br><span class="line">git reset --hard origin/master    <span class="comment"># 将本地的状态回退到和远程的一样 </span></span><br></pre></td></tr></table></figure><h2 id="3-请创建仓库分支"><a href="#3-请创建仓库分支" class="headerlink" title="3. 请创建仓库分支"></a>3. 请创建仓库分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 新分支名</span><br></pre></td></tr></table></figure><p><code>-b</code>指令包含<code>切换</code>和<code>创建</code><br>如果切换到<code>已存在</code>的分支，直接使用 <code>git checout 分支名</code>即可</p><h2 id="4-请添加远程仓库"><a href="#4-请添加远程仓库" class="headerlink" title="4. 请添加远程仓库"></a>4. 请添加远程仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin “https:xxxxx.git”</span><br></pre></td></tr></table></figure><h2 id="5-请向远程仓库推送您的垃圾"><a href="#5-请向远程仓库推送您的垃圾" class="headerlink" title="5. 请向远程仓库推送您的垃圾"></a>5. 请向远程仓库推送您的垃圾</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin 远程git分支名</span><br></pre></td></tr></table></figure><p>在设定<code>新分支</code>后，<code>首次</code>推送代码，需要使用上述命令<br>如果之前已经使用了，后续推送只需要<code>git push</code>即可</p><h2 id="6-请从远程仓库拉取代码"><a href="#6-请从远程仓库拉取代码" class="headerlink" title="6. 请从远程仓库拉取代码"></a>6. 请从远程仓库拉取代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull 仓库名称</span><br><span class="line">git <span class="built_in">clone</span> 远程仓库地址</span><br></pre></td></tr></table></figure><h2 id="7-关于删除自己写的乐色"><a href="#7-关于删除自己写的乐色" class="headerlink" title="7. 关于删除自己写的乐色"></a>7. 关于删除自己写的乐色</h2><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>将文件从暂存区和工作区中删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br></pre></td></tr></table></figure><p><code>-f</code>： 强制删除选项（如果删除之前修改过并且已经放到暂存区域的话需要用-f）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> -f runoob.txt   <span class="comment"># 强行从暂存区和工作区中删除修改后的 runoob.txt 文件</span></span><br></pre></td></tr></table></figure><p><code>--cached</code>： 想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，即仅是从跟踪清单中删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached &lt;file&gt;</span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span> --cached runoob.txt  <span class="comment"># 从暂存区中删除 runoob.txt 文件</span></span><br></pre></td></tr></table></figure><p><code>–r</code> 递归删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> –r *     <span class="comment"># 进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法随手记 1.二分法查找</title>
      <link href="/posts/5ed7a5f3.html"/>
      <url>/posts/5ed7a5f3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>二分法查找是一种常用的数据查找方法，它的前置要求是：</p><ul><li>用于查找的内容在逻辑上要求是有序的</li><li>查找的数量仅限于一个</li></ul><p>比如在一个有序的数组并且无重复元素的数组中，例如[1, 2, 3, 4, 5, 6]，需要查找3的位置就可以使用二分查找</p><p>目前来说，二分法查找主要有两种方法：</p><ul><li>左闭右闭 [left, right]</li><li>左闭右开 [left, right)</li></ul><blockquote><p>就个人来说，更推荐左闭右闭写法，更符合程序员对于数组的使用习惯</p></blockquote><h1 id="2-栗子"><a href="#2-栗子" class="headerlink" title="2.栗子"></a>2.栗子</h1><p>题目如下：</p><blockquote><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p></blockquote><p>示例一：</p><blockquote><p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4</p></blockquote><p>示例二：</p><blockquote><p>输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></blockquote><p>提示：</p><ul><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ul><p>出自<a href="https://leetcode-cn.com/problems/binary-search/">704. 二分查找 - 力扣（LeetCode） (leetcode-cn.com)</a></p><p>二分法的思想很简单，因为整个数组是有序的，可以取中间值middle：</p><ul><li>若target小于middle时，便舍弃middle右侧的部分</li><li>若target大于middle时，便舍弃middle左侧的部分</li><li>若target等于middle，middle便是你所寻找的target</li></ul><p>有些人可能会纠结middle的取值，即数组长度取偶数或奇数时的middle值</p><p>其实这没必要去担心，当长度为奇数时：</p><blockquote><p>array长度为5，middle &#x3D; (right - left) &#x3D; 2，虽然前后部分长度差1，但是对后续求解并没有影响</p></blockquote><p>长度为偶数时：</p><blockquote><p>array长度为6， middle &#x3D; (right - left) &#x3D; 3，正好是中间的数字</p></blockquote><h1 id="3-左闭右闭算法"><a href="#3-左闭右闭算法" class="headerlink" title="3.左闭右闭算法"></a>3.左闭右闭算法</h1><p>先上代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> middle = left + ((right-left)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(nums[middle]&lt;target)</span><br><span class="line">            left = middle+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nums[middle]&gt;target)</span><br><span class="line">            right = middle<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>先设置left和right，左闭右闭时为数组的两端，一个为最左端，一个为最右端</p><p>接下来进入循环，先取得第一次middle值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> middle = left + ((right-left)/<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>因为left&#x3D;0，这段代码含义其实等价于(right - left)</p><p>接下来判断target与middle的关系</p><ul><li>当middle&lt;target时，这就意味着中值在目标左侧，这时将左值移动到中值的左1位（因为中值已经小于目标，没必要再一次比较）</li><li>当middle&gt;target时，这就意味着中值在目标右侧，这时将右值移动到中值的右1位（因为中值已经大于目标，没必要再一次比较）</li></ul><p>当进行n次循环后，中值最后等于目标，这时候返回中值，即要求的目标值</p><h1 id="4-左闭右开算法"><a href="#4-左闭右开算法" class="headerlink" title="4.左闭右开算法"></a>4.左闭右开算法</h1><p>先上代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> right = numsSize;</span><br><span class="line"><span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line"><span class="type">int</span> middle = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span> (nums[middle] &gt; target)</span><br><span class="line">right = middle;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nums[middle] &lt; target)</span><br><span class="line">left = middle + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理与左闭右闭相同，但左闭右开的right为数组的右外侧，例如在array[4]&#x3D;{1,2,3,4}中，right实际上指在array的{5}位置，尽管array并没有{5}位置</p>]]></content>
      
      
      <categories>
          
          <category> 入土 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建指北（1）</title>
      <link href="/posts/95353b8a.html"/>
      <url>/posts/95353b8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h1><ol><li>博客搭建过程遇到任何问题，优先在本页面搜索，检查是否已经有该配置教程。</li><li>遇到问题可以优先在文章评论区留言，注意留言时请填写正确的邮箱以确保能收到店长的回复。</li></ol><h1 id="2-配置环境与工具准备"><a href="#2-配置环境与工具准备" class="headerlink" title="2.配置环境与工具准备"></a>2.配置环境与工具准备</h1><p><strong>本教程主要面对Windows用户</strong></p><ul><li>操作系统：Windows11</li><li>Node</li><li>Git</li><li>Hexo</li><li>文本编辑器（推荐使用Sublime Text或VS Code）</li><li>Github账号</li><li>一个域名（没有也可）</li><li>云服务器（没有也可）</li></ul><h1 id="3-Node-的安装"><a href="#3-Node-的安装" class="headerlink" title="3.Node 的安装"></a>3.Node 的安装</h1><p>1.打开<a href="https://nodejs.org/en/download/">Node官网</a>，找到适合自己系统的Node安装程序，否则后续会出现各种各样的问题。</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/node.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/node.png" alt="img"></a></p><p>建议优先下载最新版，如果后续安装出现node问题，请回退至<a href="https://nodejs.org/en/download/releases/">老版本</a>再进行安装。</p><p>2.下载后安装，安装目录建议默认即可，否则后续切换安装环境坑很多（店长就踩过很多坑）。当然如果你想安装在其他盘，后续出现环境问题请合理运用摆度和Google。</p><p>3.安装完成后，检查是否安装成功。在键盘按下Win+R键输入cmd，然后回车，打开cmd窗口，输入<code>node -v</code>，如果看到版本号，即为成功。</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/node-v.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/node-v.png" alt="img"></a></p><p>4.修改npm源。原本的npm下载各种模块是由国外服务器分发，速度嘛，懂的都懂，店长建议大家使用淘宝源对下载进行提速。打开cmd窗口，执行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="4-Git-的安装"><a href="#4-Git-的安装" class="headerlink" title="4.Git 的安装"></a>4.Git 的安装</h1><p>1.进入<a href="https://git-scm.com/downloads">Git 官网</a>，下载版本按自己选择即可</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/git.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/git.png" alt="img"></a></p><p>2.下载后默认安装即可，店长依旧建议客官安装在默认目录。</p><p>3.安装后在Windows开始界面即可见到Git CMD、Git Bash、Git GUI 三位大能，本教程主要使用Git Bash进行命令操作。</p><h1 id="5-安装-Hexo"><a href="#5-安装-Hexo" class="headerlink" title="5.安装 Hexo"></a>5.安装 Hexo</h1><p>1.右键，点击显示更多选项，之后你就能看见<code>Git Bash Here</code>选项，点击进入。</p><p>2.在打开的窗口输入以下命令安装Hexo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后输入<code>hexo -v</code>验证是否安装完成：</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo-v.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo-v.png" alt="img"></a></p><p>店长这里因为安装了ButterFly插件，客官们在安装时不会看到大标题的说。</p><p>如果看到hexo版本号，即安装成功。</p><h1 id="6-GitHub注册"><a href="#6-GitHub注册" class="headerlink" title="6.GitHub注册"></a>6.GitHub注册</h1><p>1.打开<a href="https://github.com/">GitHub官网</a></p><p>2.点击右上角的Sign up（注册）</p><p>3.输入自己的邮箱，定义密码，然后起一个响当当的名字</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github%E6%B3%A8%E5%86%8C.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github%E6%B3%A8%E5%86%8C.png" alt="img"></a></p><p>4.点击右上角的+号，之后点击New repository新建项目。</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github%E6%96%B0%E5%BB%BA.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github%E6%96%B0%E5%BB%BA.png" alt="img"></a></p><ul><li>仓库的名称必须为：&lt;用户名&gt;.github.io 例如: <code>DreamingLri.github.io</code></li><li>Discription：仓库描述，可以填也可以不填</li><li>勾选仓库可见性为Public</li><li>勾选Initialize this repository with a README 初始化一个README.md文件</li></ul><h1 id="7-将Git链接至Github"><a href="#7-将Git链接至Github" class="headerlink" title="7.将Git链接至Github"></a>7.将Git链接至Github</h1><p>1.打开Git Bash，执行以下命令，配置用户名和邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后输入<code>git config -l</code>检查配置是否成功，如果弹出你的邮箱和用户名就成功啦！</p><p>2.执行以下命令生成ssh公钥，此公钥用于链接你的计算机与GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>之后打开C盘用户文件夹下的.ssh的文件夹，会看到id_rsa.pub</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh%E6%89%93%E5%BC%80.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh%E6%89%93%E5%BC%80.png" alt="img"></a></p><p>用你的文本编辑器打开id_rsa.pub，并复制里面的神秘代码</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh.png" alt="img"></a></p><p>3.将ssh key配置到GitHub</p><p>进入 <code>github</code>，点击右上角头像 选择 <code>settings</code>，进入设置页后选择 <code>SSH and GPG keys</code>，名字随便起，公钥填到 <code>Key</code> 那一栏。</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github%20set.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/github</a> set.png)</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh%20new.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh</a> new.png)</p><p>完成后点击Add SSH key</p><p>4.测试连接，输入一下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现连接到账户的信息，说明已经大功告成</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh%20-T.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/ssh</a> -T.png)</p><h1 id="8-初始化Hexo项目"><a href="#8-初始化Hexo项目" class="headerlink" title="8.初始化Hexo项目"></a>8.初始化Hexo项目</h1><p>1.在你喜欢的位置新建一个文件夹，起名随意，在文件夹内打开Git Bash，输入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">hexo init blog-demo</span><br></pre></td></tr></table></figure><p>其中blog-demo为你的项目名，可以随意起</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo%20init.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo</a> init.png)</p><p>2.进入 <code>blog-demo</code> ，输入 <code>npm i</code> 安装相关依赖。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">cd blog-demo  //进入blog-demo文件夹</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/npm%20i.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/npm">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/npm</a> i.png)</p><ol><li><p>初始化项目后，<code>blog-demo</code> 有如下结构：</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/blog%20demo.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/blog">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/blog</a> demo.png)</p></li></ol><ul><li>【node_modules】：依赖包</li><li>【scaffolds】：生成文章的一些模板</li><li>【source】：用来存放你的文章</li><li>【themes】：主题</li><li>【.npmignore】：发布时忽略的文件（可忽略）</li><li>【_config.landscape.yml】：主题的配置文件</li><li>【config.yml】：博客的配置文件</li><li>【package.json】：项目名称、描述、版本、运行和开发等信息</li></ul><p>4.输入 hexo server 或者 hexo s 启动项目</p><p>[<img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo%20s.png" alt="img">](<a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo">https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/hexo</a> s.png)</p><p>5.打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功啦！</p><p><a href="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/4000.png"><img src="https://blog-img-1302052505.cos.ap-beijing.myqcloud.com//bgimg/4000.png" alt="img"></a></p><h1 id="9-将静态博客挂载到GitHub-Pages"><a href="#9-将静态博客挂载到GitHub-Pages" class="headerlink" title="9.将静态博客挂载到GitHub Pages"></a>9.将静态博客挂载到GitHub Pages</h1><p>1.打开Git Bash，安装hexo-deployer-git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.修改config文件</p><p>在 blog-demo 目录下的_config.yml，就是整个 Hexo 框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的<a href="https://hexo.io/zh-cn/docs/configuration">配置描述</a>。<br>修改最后一行的配置，将 repository 修改为你自己的 github 项目地址即可，还有分支要改为 <code>main</code> 或者<code>master</code>代表主分支（看你在创建项目时主分支叫什么）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">YAML</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:Fomalhaut-Blog/Fomalhaut-Blog.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><p>3.修改好配置后，运行一下命令，将代码部署到GitHub</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PLAINTEXT</span><br><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><ul><li>hexo clean：删除之前生成的文件，若未生成过静态文件，可忽略此命令</li><li>hexo generate：生成静态文章，可以用 <code>hexo g</code> 缩写</li><li>hexo deploy：部署文章，可以用 <code>hexo d</code> 缩写</li></ul><p>注意：deploy 时可能要你输入 username 和 password</p><p>如果出现 <code>Deploy done</code>，则说明部署成功了</p><p>稍等两分钟，打开浏览器访问：<a href="https://xxx.github.io/">https://xxx.github.io</a> ，这时候我们就可以看到博客内容了。</p><p>ばいばい！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生命之鸽</title>
      <link href="/posts/593a2174.html"/>
      <url>/posts/593a2174.html</url>
      
        <content type="html"><![CDATA[<h1 id="生命之歌"><a href="#生命之歌" class="headerlink" title="生命之歌"></a>生命之歌</h1><h2 id="第一章-冥古宙-起于太初"><a href="#第一章-冥古宙-起于太初" class="headerlink" title="第一章 冥古宙-起于太初"></a>第一章 冥古宙-起于太初</h2><p> 那是一切的开始，包括时间与空间。始于大爆炸的原初物质在经历了90亿年的漫长岁月后，一个后来被称为银河系的星系边缘，诞生了一颗平平无奇的恒星。在太阳系形成之初，行星数量远不止8颗，在地球刚刚形成的时候，它和忒伊亚，一颗火星大小的行星，相撞了。自此月亮诞生，从此也拉开了冥古宙的第一个时代——隐生代的序幕。随后而来的盆地群代和酒神代，塑造了地球的地貌，带来了液态水。不过我们关注的重点并不是这个，而是冥古宙的的最后一个地质时代——雨海代。</p><p><a href="https://i.loli.net/2021/05/22/vNRf3Gsygt6nB8V.jpg"><img src="https://i.loli.net/2021/05/22/vNRf3Gsygt6nB8V.jpg" alt="太古宙的地球"></a></p><p> 在早雨海代，年轻的地球又一次受到了大量陨石群的撞击，这一事件被称之为“晚期大撞击”。此时，地球表面覆盖着主要由氢气、氨气、甲烷组成的还原性大气，水循环也已经开始，伴随着电闪雷鸣，大雨倾盆而下。在日光辐射、火山热能和大气雷电的催化下，这些小分子开始发生反应，一些以碳元素为骨架的有机物开始形成，包括各种氨基酸、嘧啶、嘌呤、核糖等等。生成的有机物随雨水裹挟降落到地面，又溶入水中，千万年的沉淀积累，使原始海洋成为了一锅高浓度的有机汤。演员均已就绪，这一刻，地球的历史将被彻底改写。</p><h2 id="第二章-太古宙-生命萌芽"><a href="#第二章-太古宙-生命萌芽" class="headerlink" title="第二章 太古宙-生命萌芽"></a>第二章 太古宙-生命萌芽</h2><p> 冥古宙结束后，地球进入了名为太古宙的地质时代。此时地球已不再躁动，水循环也早已开始，海洋覆盖了星球的大部分表面。有机汤中的化学进化仍在继续，分子生命在复制自身的过程中，仍然会发生各种反应和变化，产生出新的结构和功能，这种遗传-变异机制，主宰了随后的38亿年。</p><p> 最终，在始太古代，变异的大分子发生更加紧密的联系和协作，核酸成为遗传信息的载体，指导蛋白质的合成和运作。终于，这套体系收服了磷酸分子，从此形成了膜结构，从外界独立出来——最原始的细胞诞生了。经历了数亿年的繁殖，原始汤内的有机物愈发不能满足生物的需求，生命刚开始就面临着夭折的风险。所幸的是，极少数细胞通过变异，拥有了可以利用无机物，合成有机物的能力，这些细胞就成了最原始的自养细菌。随着其它生物在饥饿中凋零殆尽，自养细菌充满了整个原始海洋，在古太古代留下了自己的印记。</p><p> 古太古代持续了4亿年，随后进入中太古代，此时的陆地一片荒芜，空气中也没有氧气，取而代之的是高浓度的二氧化碳和甲烷。强大的宇宙射线在这时可以毫无顾忌的直射在裸岩上，好在海水屏蔽了致命的辐射，成为了生命的伊甸园。早期的自养细菌附着在浅海礁岩上繁衍生息，利用分泌的胶状物质来固定自己，形成块状的菌胶团。日积月累，便形成了类似年轮的叠层岩。生命第一次在地球留下了可见的足迹，在之后的30亿年，生物作为地球演化的见证者和记录者，成为地球历史划分的标准。</p><p> 新太古代长达3亿年，此时，活跃在海洋中的依然是各种细菌，但情况似乎发生了变化，一些细菌学会了利用可见光分解水分子，把太阳的能量储存在有机物中，同时得到生长的材料。这个过程称为光合作用，具有光合作用的细菌演化成原始的蓝藻。和传统的化能合成相比，光合作用更加高效，但会产生一个副产品——氧气。少量的氧气会迅速被还原性大气所消耗，但随着蓝藻数亿年间持续释放氧气，大气成分发生了根本性变化。在新太古代，地表氧气含量急剧升高，这一现象被称为 “大氧化事件”，并彻底改变了地球的面貌和生命进程。</p><p><a href="https://i.loli.net/2021/05/22/4yX2hpUPd3a5Bix.jpg"><img src="https://i.loli.net/2021/05/22/4yX2hpUPd3a5Bix.jpg" alt="蓝藻"></a></p><h2 id="元古宙-古元古代"><a href="#元古宙-古元古代" class="headerlink" title="元古宙 古元古代"></a>元古宙 古元古代</h2><p> 地质年代的单位从大到小，依次是宙-代-纪-世-期。由于冥古宙和太古宙地质遗存过于稀少，只能被粗略分为几个代。从元古宙开始，更多地球和生命遗迹得以保存，地质时代可以细分到纪。<br>​ 成铁纪是古元古代的伊始，这是一个火红的时代，由于“大氧化事件”导致的氧气暴增，地球大气的还原性气体基本上被消耗殆尽，过剩的氧气继而与地壳和海洋中的铁产生化学反应，触目尽是红色的石英砂岩和赤铁矿，这也是地球最重要的成矿时期之一。氧气，这个在我们今天看来不可缺少的生存必须物，对于那些只能在无氧条件生存的古菌无异于毒药，大量古细菌因此灭绝，只有少部分继续在地下热泉和海洋深处的火山口苟延残喘，直到今日。<br>​ 地球上第一个大冰期——休伦冰河期横跨了成铁纪和层侵纪。由于大氧化事件，大量温室气体被氧气消耗殆尽，导致地表气温骤降，曾经火红炽热的地球第一次被冰雪覆盖，直到3亿年后，这场冰期才逐渐散去。对于生活在海洋中的古菌和蓝藻，这是一次沉重的打击。但生命是强大的，不久，一些蓝藻拥有了抗冻物质，能够保证细胞液在冰点以下也能保持液态，在冰雪中进行光合作用。有些细菌外包裹了一层荚膜，储存营养和保持细胞形态。还有细菌的休眠体——芽孢，能让细菌度过恶劣的环境。<br>​ 古元古代的海洋是原核生物的天下，在漫长的岁月里，生命分化成越来越多的种类，适应各种环境。新的遗传信息被添加到它们的DNA链上，指导蛋白质合成，组成了各种各样的新结构。一些细菌拥有了分子级别的发动机，用来驱动纤毛的摆动，这些细胞具备了运动的能力，一些蓝藻开始聚集成群体，共享一些养料，并且能交换简单的化学信息。另一些细胞放弃了自己生产有机物，它们伸出细胞膜，包裹住其它细胞，拆解受害者的身体作为自己生长原料和能量来源，这群多变的原生质团成为了地球最早的捕食者。</p><p><a href="https://i.loli.net/2021/05/22/CkHIX2w6MJhBexg.jpg"><img src="https://i.loli.net/2021/05/22/CkHIX2w6MJhBexg.jpg" alt="分子发动机"></a></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 古生物 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>糖果屋の开张</title>
      <link href="/posts/8507.html"/>
      <url>/posts/8507.html</url>
      
        <content type="html"><![CDATA[<h1 id="开业大吉"><a href="#开业大吉" class="headerlink" title="开业大吉"></a>开业大吉</h1><p>ここは夢華の菓子屋ですね</p><p>みんな、はじめまして，よろしく！</p><p>这个博客始建于2020年11月8日，在历经停止维护两年后，终于再次与大家见面</p><p>这次我重构了博客底层，重新配置了图床以及美化了许多细节</p><p>本人以后将成为一名<del>光荣的</del>程序员，以后也会写一些有关算法的烂笔头</p><p>本次博客基于<a href="https://hexo.io/">Hexo</a>框架<a href="https://butterfly.js.org/">Butterfly</a>主题，魔改内容部分来自<a href="https://www.fomal.cc/">Fomalhaut</a>，以后我也会出一些有关Butterfly主题的魔改教程</p><p>就这样</p><p>じゃ、ばいばい　(≧∇≦)ﾉ</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
